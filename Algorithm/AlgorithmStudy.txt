** Algorithm
NOTION 
-> https://www.notion.so/Algorithm-3fcaf235d1b64dd798589c9097395c73
1. 알고리즘의 정의 

    1) 정의 

    - 문제를 해결하거나 함수를 계산하기 위해 따라가야 할 모호함이 없는 간단한 명령들로 구성된 일련의 순서적 단계
    - 튜링 기계에 의해 수행 가능한 프로시저
    - 알고리즘 유형(수열, 수학, 배열, 자료구조, 응용) : 규칙을 찾아서 알고리즘을 찾아냄

    ⇒ 문제를 해결 → 읽어들임 → READ  

    ⇒ 순서도의 그림을 통해서 계산 → 출력 (고급언어, 한글, 영문 서술, 순서도의 기호를 이용해서 사용해도 됨)

    2) 알고리즘의 요건 

    - 외부에서 0개 이상의 입력을 받아들여, 하나 이상의 출력을 생성
    - 각 단계가 단순하고 모호하지 않아야 함 < 가장 큰 특징
    - 한정된 수의 작업 후에는 반드시 끝나야 함
    - 모든 명령이 수행 가능해야 함
    - 효율적이어야 함

    3) 알고리즘과 순서도 

    - 알고리즘을 표현하기 위한 방법으로 순서도(Flow Chart)를 가장 많이 사용
    - 순서도를 이용하면 알고리즘의 구조를 한눈에 파악하기 용이함

2. 순서도의 개념 
    - (1) 순서도란, 미리 정해진 기호를 이용하여 그려지는 그림으로 논리적인 절차를 표현하는 방법 중 하나
    - 순서도를 이용하면 전체적인 구조가 한눈에 들어오므로 프로그래밍을 구현하기 이전 단계인 논리적 절차를 위한 알고리즘을 표현하기 위한 방법으로 순서도(Flow Chart)를 가장 많이 사용

        ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cb8121f6-0ebd-4fef-9f0d-feff307184bd/_2021-01-30__1.46.17.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cb8121f6-0ebd-4fef-9f0d-feff307184bd/_2021-01-30__1.46.17.png)

    (2) 순서도 작성법 

    1) 기본 사항 

    - 순서도는 물이 위에서 아래로 흐르듯이 윗부분에서 아래로 차례대로 그려나감.(제어흐름이 달라지는 특수한 경우 제외)
    - START 기호로부터 시작해서 END(대신 STOP)  기호로 끝남
    - 순서도는 크게 직선구조, 분기구조, 반복구조로 나뉨
    - 기호와 기호 사이에는 흐름선을 이용
    - 값을 보관하고자 할 경우 변수를 이용

    2) 순서도의 3가지 구조 

    ⇒ 직선구조 

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cc59f880-c389-4528-b5c6-d0f5bb6a6267/_2021-01-30__1.53.48.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cc59f880-c389-4528-b5c6-d0f5bb6a6267/_2021-01-30__1.53.48.png)

    ⇒ 분기구조 

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/28401800-23d3-4bff-83fd-7507600125ff/_2021-01-30__1.54.49.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/28401800-23d3-4bff-83fd-7507600125ff/_2021-01-30__1.54.49.png)

    ⇒ 반복구조 

    →  조건문과 반복문 두개 다 조건이 들어가는 것이 공통점 

    → 조건문은 조건문을 만족하면 한 번만 수행, 반복문은 계속 반복 

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/749a11fb-7f3e-4e52-a63b-59829d33641d/_2021-01-30__1.56.23.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/749a11fb-7f3e-4e52-a63b-59829d33641d/_2021-01-30__1.56.23.png)

3. 순서도의 개념 
    - 프로그래밍이란, 논리의 전개. 문제를 해결하고자 하는 논리들을 질서있게 나열한 문장들이며, 처음부터 순서대로 물흐르듯이 명령들을 수행 함. 프로그램을 작성한다는 것은 이러한 순서를 나열하는 것이며, 그것은 곧 프로그램을 작성함을 의미함.

    1) 변수(variable) 

    - 절차적 프로그래밍 언어에서 프로그램의 값을 움직이는 주체적 역할을 하는 것으로, '변하는 값'을 가지게 되는 기억공간의 이름. 프로그램에서는 변수라는 이름으로 불리게 되지만 메모리에 할당된 후로는 메모리주소 몇 번지에서 몇 번지까지의 이름으로 바뀌게 될 것.

    2) 상수(constant)

    - 변수가 변하는 값을 지니고 있는 기억공간의 이름이라면 상수는 '항상 똑같은 값을 갖는 수'라는 의미로서 숫자, 문자 등을 의미

    3) 데이터타입(자료형, data type) 과 선언

    - 프로그래밍을 하기 위해서는 데이터를 컴퓨터 내부로 읽어들여 표현해야 하는데 데이터의 종류에 따라 크게 문자, 숫자 등으로 나뉘게 됨. 즉, 자료를 컴퓨터적으로 표현하는 방법에 따라서 자료들이 형(type)을 갖는다는 것

    4) 치환(assignment) 

    - 컴퓨터 프로그래밍에서는 값을 변수에 배정하는 것을 "치환(assign)한다"라고 하고 기호로는 =을 이용

        ⇒ 오른쪽은 변수, 값, 수식, 왼쪽은 반드시 기억공간 

        ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/90e1e4c2-aeab-41fd-a24b-f5f66efb5bc2/_2021-01-30__2.15.59.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/90e1e4c2-aeab-41fd-a24b-f5f66efb5bc2/_2021-01-30__2.15.59.png)

    5) 예약어 (reserved word)와 식별자(사용자 정의어, identifier) 

    - 프로그램 내에는 반드시 그렇게 사용해야 하는 용어와 그렇지 않고 프로그래머가 만들어 사용하는 용어가 있는데, 전자는 예약어 (reserved word)라 하며 후자는 식별자(identifier) 라고 함
    - 예약어를 익히는 것이 그 언어의 문법을 익히는 것과 같게 됨

    6) 주석문(comment) 

    - 프로그램의 실행과는 관계없이 프로그램 코드 내에 기록할 문자
    - 주로 프로그램을 해설하는 내용이 첨가될 때 사용

=============================================================

** 수열

1. 1/2 + 2/3 + 3/4 + ... + 9/10 구하기
    - 문제 : 1/2 + 2/3 + 3/4 + ... + 49/50 의 순서로 나열되는 수열의 합계를 구하는 순서도 작성
    - 문제 분석

        ⇒ a : 분자 항을 나타내는 변수를 의미 

        ⇒ b : 분모 항을 나타내는 변수를 의미 

        ⇒ H : a/b 형태의 수열이 누적되어 저장될 변수 

    - 준비

        ⇒ a = 0, b = 1, H = 0 으로 초기화 

    - 처리

        ⇒ a = a+1(1만큼 증가), b = b + 1 (1만큼 증가) 

        ⇒ H = H + a/b 

    - 결과

        ⇒ 합계(H) 출력 

    1) Flow Chart 

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0de05e6a-5f4a-452e-8e9b-a79bb9143466/_2021-01-30__2.35.55.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0de05e6a-5f4a-452e-8e9b-a79bb9143466/_2021-01-30__2.35.55.png)

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f14d2fbd-7ec5-4a34-8199-8569f208d815/_2021-01-30__2.37.32.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f14d2fbd-7ec5-4a34-8199-8569f208d815/_2021-01-30__2.37.32.png)

    2) code

    ```java
    public class study_001 {

    	public static void main(String[] args) {
    		Double a, b = 1.0;
    		double hab = 0;
    		for(a=1.0; a<=9; a=a+1) {
    			b = b + 1;
    			hab = hab + a/b;
    			System.out.print(a + "/" + b + " ");
    			}
    			System.out.println(" 의 합 : " + hab);
    	}

    }
    ```

2. 1+1/1+1/2+1/3+...+1/10 구하기
    - 문제 : 1+1/1+1/2+1/3+...+1/10 의 순서로 나열되는 수열의 10번째 항까지의 합계를 구하는 순서도 작성
    - 문제 분석

        ⇒ i : 각항을 나타내는 변수를 의미 

        ⇒ S : i의 수열이 누적되어 저장될 변수(1+1/1+1/2+1/3+...)

        ⇒ H : a/b 형태의 수열이 누적되어 저장될 변수 

    - 준비

        ⇒ i=0, S=1로 초기화(유형 1)

        ⇒ i=1, S=1로 초기화(유형 2)

    - 처리

        ⇒ i = i + 1 (1만큼 증가)

        ⇒ S = S + 1/i

    - 결과

        ⇒ 합계(S) 출력 

    1) Flow Chart 

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5b2d984d-29d9-4ee5-89c0-a275567a40d8/_2021-01-30__4.18.40.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5b2d984d-29d9-4ee5-89c0-a275567a40d8/_2021-01-30__4.18.40.png)

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4ef4ad02-6436-476e-92d7-557909809986/_2021-01-30__4.20.10.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4ef4ad02-6436-476e-92d7-557909809986/_2021-01-30__4.20.10.png)

    2) code

    ```java
    public class study_001 {

    	public static void main(String[] args) {
    		double i;
    		double s = 1; 
    		System.out.print("1");
    		for(i = 1; i<=10; i=i+1) {
    			s = s + 1/i;
    			System.out.print(" 1/" + i);
    		}
    		System.out.format("누적값 :"+s);
    	}
    }
    ```

=============================================================

** 소수 

1. 소수를 판별하는 알고리즘 
    - 문제 : 임의의 양의 정수를 입력하여 소수를 판별하는 순서도를 작성.
    - 문제 분석

        ⇒ 소수란 ? 1과 자기 자신만을 약수로 가지는 수를 의미 

        ⇒ A : 입력 받은 수, J : 2부터 A까지의 수 (제수), MOD()는 나머지를 구하는 함수 

    - 준비

        ⇒ 젯수 J를 2로 초기화

    - 처리

        ⇒ 입력 받은 수를 J로 나눈 나머지가 0이면 a로 분기하고 아니면 b로 분기.

        나머지가 0이 될 때 까지 이 과정을 반복 

    - 결과

        ⇒ "소수" 또는 "소수가 아님"을 출력 

    1) Flow Chart 

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/afef6bca-b2fa-4885-9fb3-5f0dfa21e66d/_2021-01-30__4.38.43.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/afef6bca-b2fa-4885-9fb3-5f0dfa21e66d/_2021-01-30__4.38.43.png)

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/92279ef5-6fe4-4373-8014-0543c1d13ee0/_2021-01-30__4.41.05.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/92279ef5-6fe4-4373-8014-0543c1d13ee0/_2021-01-30__4.41.05.png)

    2) code 

    ```java
    public class study_002 {

    	public static void main(String[] args) throws IOException {
    		int num = 0, j; 
    		Boolean isPrime = true;
    		num = System.in.read();
    		for(j=2; j<num; j=j+1) {
    			if(num%j == 0) {
    				isPrime = false;
    				break;
    			}
    		}
    		if(isPrime) {
    			System.out.print("소수");
    		}else {
    			System.out.print("소수가 아님");
    		}
    	}
    }
    ```

=============================================================

** 소수

1. 소수의 합 구하기 
    - 문제 : 임의의 양의 정수를 입력하여 그 안에 포함된 소수의 합을 구하는 순서도를 작성
    - 문제 분석

        ⇒ 입력받은 수가 10이면 2~10사이의 소수를 구하고 그 합을 구하는 순서도를 작성 

        ⇒ A : 입력 받은 수 J : 2부터 A까지의 수(제수) , MOD()는 나머지를 구하는 함수

        ⇒ SUM : 소수가 누적되어 저장될 변수 

        ⇒ K : 소수인지 판단 할 숫자를 2부터 시작 

    - 준비

        ⇒ SUM = 0, k = 2, 제수 J를 2로 초기화

    - 처리

        ⇒ 입력 받은 수를 J로 나눈 나머지가 0이면 a로 분기하고 아니면 b로 분기.

        소수이면 변수 SUM에 값을 누적, 나머지가 0이 될 때 까지 이 과정을 반복 

    - 결과

        ⇒ 소수의 개수 sum을 출력 

    1) Flow Chart 

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/06ae57e4-6ab6-40d1-b39a-87cd65379637/_2021-01-30__5.09.12.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/06ae57e4-6ab6-40d1-b39a-87cd65379637/_2021-01-30__5.09.12.png)

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/517e99ed-7bb7-4af3-a91c-8919bb7c96ff/_2021-01-30__5.10.27.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/517e99ed-7bb7-4af3-a91c-8919bb7c96ff/_2021-01-30__5.10.27.png)

    2) code 

    ```java
    public class study_003 {

    	public static void main(String[] args) {
    		Scanner sc = new Scanner(System.in); 
    		int num = sc.nextInt();
    		int sum = 0;
    		int K = 2; 
    		do {
    			int J = 2; 
    			while(K%J != 0) {
    				J = J + 1;
    			}
    			if(K==J) {
    				sum = sum + K;
    				System.out.print(K+"\t");
    			}
    			if(K<num) {
    				K = K + 1;
    			} else {
    				break;
    			} 
    		} while(true); 
    			System.out.println("\n");
    			System.out.println("입력한 " + num + "까지 소수의 합: " + sum);
    		
    			sc.close();
    	} 
    }

=============================================================

** 소수

1. 소수의 개수 구하기 
    - 문제 : 임의의 양의 정수를 입력하여 그 안에 포함된 소수의 개수를 구하는 순서도를 작성
    - 문제 분석

        ⇒ 입력받은 수가 10이면 2~10사이의 소수를 구하고 그 개수를 구하는 순서도를 작성 

        ⇒ A : 입력 받은 수 J : 2부터 A까지의 수(제수) , MOD()는 나머지를 구하는 함수

        ⇒ cnt : 소수가 누적되어 저장될 변수 

        ⇒ K : 소수인지 판단 할 숫자를 2부터 시작 

    - 준비

        ⇒ SUM = 0, k = 2, 제수 J를 2로 초기화

    - 처리

        ⇒ 입력 받은 수를 J로 나눈 나머지가 0이면 a로 분기하고 아니면 b로 분기.

        소수이면 개수를 누적, 나머지가 0이 될 때 까지 이 과정을 반복 

    - 결과

        ⇒ 소수의 개수 cnt을 출력 

    1) Flow Chart 

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2b214c7b-4ca9-44c7-b155-6bc6b93c3a1e/_2021-01-30__5.38.38.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2b214c7b-4ca9-44c7-b155-6bc6b93c3a1e/_2021-01-30__5.38.38.png)

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b94fd1d6-d33d-46f4-9356-7369ddc41cd0/_2021-01-30__5.39.01.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b94fd1d6-d33d-46f4-9356-7369ddc41cd0/_2021-01-30__5.39.01.png)

    2) code 

    ```java
    public class study_004 {

    	public static void main(String[] args) {
    		Scanner sc = new Scanner(System.in);
    		int num = sc.nextInt();
    		int cnt = 0;
    		int K = 2; 
    		do {
    			int J=2;
    			while(K%J !=0) {
    				J = J + 1;
    			}//while
    			if(K==J) {
    				cnt = cnt + 1;
    				System.out.print(K + "\t");
    			} // if 
    			if (K<num) {
    				K = K + 1;
    			} else {
    				break;
    			}
    		} while (true); 
    		System.out.println("");
    		System.out.println("입력한 " + num + "까지의 소수 개수 : " + cnt + "개");
    		sc.close();
    	}
    }

=============================================================

** 배수

1. 배수 구하기 
    - 문제 : 1부터 100까지의 5의 배수의 개수와 합계 구하기
    - 문제 분석

        ⇒ i : 각 항을 나타내는 변수를 의미 

        ⇒ sum : 누적 값(합계)을 나타내는 변수를 의미 

        ⇒ cnt : 개수를 나타내는 변수  

    - 준비

        ⇒ i = 0, cnt = 0, sum = 0 으로 초기화

    - 처리

        ⇒ i = i + 1 (1만큼 증가) 

        ⇒ sum = sum + i (합계는 i만큼 증가)

    - 결과

        ⇒ 개수(cnt)와 합계(sum)을 출력 

    1) Flow Chart 

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/19ea4b97-49af-463a-afd6-e2f53a7dbb02/_2021-01-30__5.52.37.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/19ea4b97-49af-463a-afd6-e2f53a7dbb02/_2021-01-30__5.52.37.png)

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/21b2bba4-d101-4f24-b9bb-3254fa9c3ed8/_2021-01-30__5.53.01.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/21b2bba4-d101-4f24-b9bb-3254fa9c3ed8/_2021-01-30__5.53.01.png)

    2) code 

    ```java
    public class study_005 {
    	public static void main(String[] args) {
    		Scanner sc = new Scanner(System.in);
    		
    		int x = sc.nextInt();
    		
    		int i = 0;
    		int cnt = 0; 
    		int sum = 0;
    		
    		for(i=0; i<=100; i=i+1) {
    			if(i%x == 0) {
    				cnt = cnt + 1;
    				sum = sum + i;
    				System.out.print(i+"\t");
    			} // if
    		} // for 
    		System.out.println();
    		System.out.println("1부터 100까지의 수 중 " + x + "의 배수의 개수 : " + cnt + "개");
    		System.out.println("1부터 100까지의 수 중 " + x + "의 배수의 합 : " + sum);
    		
    		sc.close();
    	}
    }

public class study_006 {
	public static void main(String[] args) {
		
		int i, j, num, p = 0;
		int [] a = new int [100];
		
		System.out.print("숫자를 입력하세요 : ");
		Scanner sc = new Scanner(System.in);
		num = sc.nextInt();
		for(j=1; j<=num; j=j+1) {
			if(num%j == 0) {
				p = p + 1;
				a[p]=j;
			} // if
		} // for 
		System.out.println("약수 출력 결과");
		for(i=1; i<=p; i=i+1) {
			System.out.println(i+"번째 : " + a[i]);
		}
		
		sc.close();
	}
}
    
=============================================================

** 약수

1. 최대공약수, 최소 공배수 구하기 
    - 문제 : 두 개 정수를 입력 받아 두 수의 최대 공약수와 최소 공배수를 구하는 순서도 작성
    - 문제 분석

        ⇒ 주어진 두 개 숫자 중에서 큰 수를 결정한 수 큰 수 / 작은 수를 계산해서 나머지가 0이 아니면 다시 작은 수를 큰 수로 하고 나머지를 작은 수로 해서 다시 나눗셈을 한 후 나머지가 0이면 작은 수가 최대 공약수.

        ⇒ 최소 공배수를 구하는 방법은 두 수를 곱하여 최대 공약수로 나누면 구해짐 

    - 준비

        ⇒ 두 수(a,b)를 입력 받는다. 큰 수를 big으로, 작은 수를 small로 지정 

    - 처리

        ⇒ big/small의 나머지를 nmg로 지정. nmg = 0 이면 small이 gcm이 되고 lcm은 원래 두 수를 곱하여 gcm으로 나누면 구해짐

        ⇒ nmg가 0이 아니면 small의 값을 big의 값으로, nmg를 small의 값을 한 후 위 과정을 반복 

    - 결과

        ⇒ gcm, lcm을 출력 

    1) Flow Chart 

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0b5fb8c0-5752-45ef-8f77-20a119cdf781/_2021-01-30__9.35.18.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0b5fb8c0-5752-45ef-8f77-20a119cdf781/_2021-01-30__9.35.18.png)

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/80cd06f6-1000-48a8-86e3-9c21dc8f4dea/_2021-01-30__9.36.47.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/80cd06f6-1000-48a8-86e3-9c21dc8f4dea/_2021-01-30__9.36.47.png)

    2) code 

    ```java
    public class study_007 {

    	public static void main(String[] args) {
    		Double lcm = 0.0, gcm  = 0.0, nmg, Big, Small, a, b;
    		
    		System.out.println("2개의 숫자를 입력해주세요. : ");
    		Scanner sc = new Scanner(System.in);
    		
    		a = sc.nextDouble();
    		b = sc.nextDouble();
    		
    		if(a >= b) {
    			Big = a; Small = b;
    		} else {
    			Big = b; Small = a;
    		}
    		while (true) {
    			nmg = (Big%Small);
    			if(nmg == 0) {
    				gcm = Small;
    				lcm = ((a * b) / gcm);
    				break;
    			} else {
    				Big =  Small;
    				Small = nmg; 
    			}
    		}
    			
    			System.out.println("출력");
    			System.out.println("최대 공약수 : " + gcm);
    			System.out.println("최소 공배수 : " + lcm);
    			
    			sc.close();
    	}
    }

=============================================================

** 최대값 

1. 최대값 구하기 
    - 문제 : 키보드로 5개의 성적을 입력받아 최대값을 구하는 순서도를 작성
    - 문제 분석

        ⇒ s : 입력 받은 숫자의 개수가 저장될 변수 

        ⇒ j : 입력 받은 숫자가 저장될 배열  

        ⇒ max : 최대값 저장 

    - 준비

        ⇒ s와 max를 0으로 초기화, 배열 j(5)를 선언 

        ⇒ 배열 j에 저장할 데이터를 5개 읽어들임

    - 처리

        ⇒ i = i + 1 (1만큼 증가) 

        ⇒ j(i)의 값을 max와 하나씩 비교해서 max보다 더 크면 j(i)를 max로 함 

    - 결과

        ⇒ max를 출력 

    1) Flow Chart 

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a4998561-a593-4dcd-8e6f-d79d96b33d8f/_2021-01-30__10.16.41.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a4998561-a593-4dcd-8e6f-d79d96b33d8f/_2021-01-30__10.16.41.png)

    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9a040692-825e-4cc6-95cb-fdc27114e58c/_2021-01-30__10.17.16.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9a040692-825e-4cc6-95cb-fdc27114e58c/_2021-01-30__10.17.16.png)

    2) code 

    ```java
   public class study_008 {

	public static void main(String[] args) {
		int s = 0, max = 0;
		int [] j = new int[5];
		System.out.println("5개의 숫자 입력");
		Scanner sc = new Scanner(System.in);
		for(s=0; s<5; s=s+1) {
			j[s] = sc.nextInt();
		}
		for(int i=0; i<5; i=i+1) {
			if(j[i] > max) {
				max = j[i];
			}
		}
		System.out.println("최대값은: " + max);
	}
}

   